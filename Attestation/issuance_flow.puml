@startuml
'https://plantuml.com/sequence-diagram

title OpenID4VCI Attested Issuance

autonumber

participant u as "Holder/\nOAuth2 User"
participant a as "Attestation Service"
participant w as "Holder's Wallet/\nOAuth2 Client"
participant b as "Issuer's Website"
participant i as "Issuer/\nOAuth2 Authorization Server"
participant t as "Trust List"

== Pre-Authorized Code Flow ==
u -> b : upfront communication & authentication

i -> b : send Credential Offer: <credential_offer_uri>
b -> w : openid-credential-offer://credential_offer=<credential_offer_uri>

w -> i : HTTP GET <credential_offer_uri>
i -> w : HTTP 200 {"credential_issuer_url"="..", "credentials"="..", "pre_authroized_code"="..", "user_pin_required"=".."

w -> i : Issuer Metadata:\nHTTP GET <credential_issuer_url>/.well-known/openid-credential-issuer
i -> w : HTTP 200 {"credential_issuer"="..", "credential_endpoint="..","credentials_supported"=".."}

w -> i : Issuer Metadata:\nHTTP GET <credential_issuer_url>/.well-known/oauth-authorization-server
i -> w : HTTP 200 {"issuer":"..", "token_endpoint":"..", "response_types_supported":"pre-authorized_code",**"attestation_required":"true/version"**}

u -> w : request issuance\noptionally provide PIN

note over w: select or obtain wallet attestation VC, wallet attestations are issuer-specific for privacy protection
opt on-demand wallet attestation
note over w,a: attestation may be a proprietary process,\n the interoperability of wallet attestations\nacross multiple wallets and attestation services\n is achieved by a common credential schema
w -> a : get challenges
a -> w : provide challenges
w -> w : generate hardware keys, key attestations & app attestation
w -> a : send keys and attestations
a -> a : verify key & app attestations
a -> w : issue wallet attestation
end

w -> w : generate VP of wallet attestation\nwith **nonce=pre_authroized_code**

w -> i : Token Request:\nHTTP POST https://issuer.com/<token_endpoint>\ngrant_type=pre-authorized_code&pre-authorized_code=..&user_pin=..**&attestation=<VP of wallet attestation>**
i -> i : verify wallet attestation VP
i -> t : query certification status of wallet provider
t -> i : certification status of wallet provider
i -> w : Token Response:\nHTTP 200  {"access_token":"..", "token_type"="..", "c_nonce"=".."}

note over w : generate keys for proof of possession for binding key with c_nonce\n{"alg": "ES256", "x5c/kid/jwk":..}.{"aud":"https://issuer.com","iat": ..,"nonce":".."}\nOR\nreuse the hardware keys from wallet attestation
w -> i : Credential Request:\nHTTP POST https://issuer.com/credential\nAuthorization: Bearer <access_token>\n{"format":"..", "proof":{"proof_type":"jwt","jwt":".."}}
i -> w : Credential Response:\nHTTP 200 {"format":"..","credential":".."

@enduml